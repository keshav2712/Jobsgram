[{"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/index.js":"1","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/App.js":"2","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/reportWebVitals.js":"3","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/store.js":"4","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/utils/setAuthToken.js":"5","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/actions/authActions.js":"6","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/auth/Register.js":"7","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/private-route/PrivateRoute.js":"8","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/dashboard/Dashboard.js":"9","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/auth/DetailsA.js":"10","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/recruiter/EditJob.js":"11","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/auth/DetailsR.js":"12","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/recruiter/Applications.js":"13","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/auth/Login.js":"14","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/actions/types.js":"15","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/dashboard/AddJobs.js":"16","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/recruiter/JobListings.js":"17","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/recruiter/MyEmployees.js":"18","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/utils/saveUser.js":"19","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/dashboard/Jobs.js":"20","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/recruiter/Applicant.js":"21","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/layout/Navbar.js":"22","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/tabs/ProfileR.js":"23","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/applicant/MyApplication.js":"24","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/tabs/ProfileA.js":"25","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/reducers/index.js":"26","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/recruiter/Job.js":"27","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/recruiter/Employee.js":"28","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/dashboard/Job.js":"29","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/applicant/Application.js":"30","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/reducers/authReducers.js":"31","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/reducers/errorReducers.js":"32","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/utils/rating.js":"33"},{"size":287,"mtime":1611651540341,"results":"34","hashOfConfig":"35"},{"size":1960,"mtime":1611651540161,"results":"36","hashOfConfig":"35"},{"size":362,"mtime":1611651540345,"results":"37","hashOfConfig":"35"},{"size":357,"mtime":1611651540345,"results":"38","hashOfConfig":"35"},{"size":328,"mtime":1611651540345,"results":"39","hashOfConfig":"35"},{"size":1949,"mtime":1611651540161,"results":"40","hashOfConfig":"35"},{"size":5763,"mtime":1611651540337,"results":"41","hashOfConfig":"35"},{"size":585,"mtime":1611651540341,"results":"42","hashOfConfig":"35"},{"size":6196,"mtime":1611651540337,"results":"43","hashOfConfig":"35"},{"size":13350,"mtime":1611651540241,"results":"44","hashOfConfig":"35"},{"size":8282,"mtime":1611651540341,"results":"45","hashOfConfig":"35"},{"size":7031,"mtime":1611651540241,"results":"46","hashOfConfig":"35"},{"size":6808,"mtime":1611651540341,"results":"47","hashOfConfig":"35"},{"size":4117,"mtime":1611651540241,"results":"48","hashOfConfig":"35"},{"size":127,"mtime":1611651540161,"results":"49","hashOfConfig":"35"},{"size":12080,"mtime":1611651540337,"results":"50","hashOfConfig":"35"},{"size":2519,"mtime":1611651540341,"results":"51","hashOfConfig":"35"},{"size":5197,"mtime":1611651540341,"results":"52","hashOfConfig":"35"},{"size":417,"mtime":1611651540345,"results":"53","hashOfConfig":"35"},{"size":8955,"mtime":1611677384745,"results":"54","hashOfConfig":"35"},{"size":7642,"mtime":1611651540341,"results":"55","hashOfConfig":"35"},{"size":601,"mtime":1611651540341,"results":"56","hashOfConfig":"35"},{"size":7011,"mtime":1611651540341,"results":"57","hashOfConfig":"35"},{"size":2638,"mtime":1611651540161,"results":"58","hashOfConfig":"35"},{"size":20016,"mtime":1611651540341,"results":"59","hashOfConfig":"35"},{"size":207,"mtime":1611651540345,"results":"60","hashOfConfig":"35"},{"size":3423,"mtime":1611651540341,"results":"61","hashOfConfig":"35"},{"size":2578,"mtime":1611651540341,"results":"62","hashOfConfig":"35"},{"size":9371,"mtime":1611651540337,"results":"63","hashOfConfig":"35"},{"size":3913,"mtime":1611651540161,"results":"64","hashOfConfig":"35"},{"size":430,"mtime":1611651540345,"results":"65","hashOfConfig":"35"},{"size":241,"mtime":1611651540345,"results":"66","hashOfConfig":"35"},{"size":1384,"mtime":1611651540345,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"18blm2g",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"70"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"70"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/index.js",[],["147","148"],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/App.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/reportWebVitals.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/store.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/utils/setAuthToken.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/actions/authActions.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/auth/Register.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/private-route/PrivateRoute.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/dashboard/Dashboard.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/auth/DetailsA.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/recruiter/EditJob.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/auth/DetailsR.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/recruiter/Applications.js",["149"],"import React, { useState, useEffect } from \"react\";\nimport Applicant from \"./Applicant\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nexport default function Applications(props) {\n  const job = props.location.state.detail;\n  const [applicants, setApplicants] = useState([]);\n  const [filter, setFilter] = useState({ asc: \"1\", choice: \"name\" });\n  const [disabled, setDisabled] = useState(false);\n  const classes = useStyles();\n\n  useEffect(() => {\n    let isMounted = true;\n    if (props) {\n      axios\n        .post(\"api/jobs/getOne\", job)\n        .then((res) => {\n          if (isMounted) {\n            setApplicants(res.data.applicants);\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [props]);\n  const checkPostions = (newJob) => {\n    setDisabled(true);\n    axios\n      .post(\"api/jobs/updateStatusAccept\", newJob)\n      .then((res) => {\n        axios\n          .post(\"api/jobs/checkPositions\", job)\n          .then((res) => {\n            setApplicants(res.data.applicants);\n          })\n          .catch((err) => {\n            console.log(err);\n          });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    setDisabled(false);\n  };\n  return (\n    <>\n      <div className=\"Navbar-fixed\">\n        <nav className=\"z-depth-0\">\n          <div className=\"nav-wrapper\" style={{ backgroundColor: \"#2E284C\" }}>\n            <div\n              style={{\n                fontFamily: \"monospace\",\n                fontColor: \"#F0F1F7\",\n              }}\n              className=\"col s5 brand-logo center\"\n            >\n              <i className=\"material-icons\">work</i>\n              JOBSGRAM\n            </div>\n            <div className=\"left\" style={{ paddingLeft: \"20px\" }}>\n              <button\n                style={{\n                  width: \"100px\",\n                  letterSpacing: \"1.5px\",\n                  backgroundColor: \"#2E284C\",\n                }}\n                onClick={(e) => {\n                  props.history.push(\"/dashboard\");\n                }}\n                className=\"btn btn-medium\"\n              >\n                Home\n              </button>\n            </div>\n          </div>\n        </nav>\n      </div>\n      <div className=\"container valign-wrapper\" style={{ width: \"80%\" }}>\n        <div className=\"row\">\n          <div className=\"col s12 center-align\">\n            <div className=\"container\" style={{ margin: \"0\" }}>\n              <div\n                className=\"row\"\n                style={{ width: \"500px\", marginTop: \"2rem\" }}\n              >\n                <div className=\"col s12 \">\n                  <h4 className=\"grey-text text-darken-4 header left-align \">\n                    <b>Applications</b> for {job.title}\n                  </h4>\n                </div>\n              </div>\n              <div\n                className=\"row center-align\"\n                style={{ marginBottom: \"1.6rem\", minWidth: \"80vw\" }}\n              >\n                <p className=\"left-align grey-text text-darken-3\" style={sty}>\n                  Sort By:\n                </p>\n                <FormControl className={classes.formControl}>\n                  <Select\n                    value={filter.choice}\n                    onChange={(event) => {\n                      setFilter({ ...filter, choice: event.target.value });\n                    }}\n                  >\n                    <MenuItem value=\"name\">Name</MenuItem>\n                    <MenuItem value=\"dateOfApplication\">Date Applied</MenuItem>\n                    <MenuItem value=\"rating\">Rating</MenuItem>\n                  </Select>\n                </FormControl>\n                <p className=\"grey-text text-darken-3\" style={sty}>\n                  in\n                </p>\n                <FormControl className={classes.formControl}>\n                  <Select\n                    value={filter.asc}\n                    onChange={(event) => {\n                      setFilter({ ...filter, asc: event.target.value });\n                    }}\n                  >\n                    <MenuItem value=\"1\">Ascending</MenuItem>\n                    <MenuItem value=\"-1\">Descending</MenuItem>\n                  </Select>\n                </FormControl>\n                <p className=\"grey-text text-darken-3\" style={sty}>\n                  Order\n                </p>\n              </div>\n              {applicants\n                .sort((applicant1, applicant2) => {\n                  if (filter.choice === \"dateOfApplication\")\n                    return (\n                      (new Date(applicant1[\"dateOfApplication\"]) -\n                        new Date(applicant2[\"dateOfApplication\"])) *\n                      parseInt(filter.asc)\n                    );\n                  else if (filter.choice === \"name\") {\n                    if (applicant1.id.name) {\n                      return (\n                        applicant1.id.name\n                          .split(\" \")[0]\n                          .localeCompare(applicant2.id.name.split(\" \")[0]) *\n                        parseInt(filter.asc)\n                      );\n                    } else return false;\n                  } else {\n                    return (\n                      (applicant1.id.rating - applicant2.id.rating) *\n                      parseInt(filter.asc)\n                    );\n                  }\n                })\n                .filter((application) => {\n                  var notEmployed = true;\n                  if (application.id.jobsApplied) {\n                    for (\n                      let i = 0;\n                      i < application.id.jobsApplied.length;\n                      i++\n                    ) {\n                      if (application.id.jobsApplied.status === \"accepted\") {\n                        notEmployed = false;\n                      }\n                    }\n                  }\n                  return application.status !== \"rejected\" && notEmployed;\n                })\n                .map((applicant) => (\n                  <Applicant\n                    applicant={applicant}\n                    job={job}\n                    key={applicant._id}\n                    checkPostions={checkPostions}\n                    disabled={disabled}\n                  />\n                ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\nconst sty = {\n  width: \"120px\",\n  display: \"inline-block\",\n};\n","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/auth/Login.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/actions/types.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/dashboard/AddJobs.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/recruiter/JobListings.js",["150","151","152"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Job from \"./Job\";\n\nexport default function JobListings(props) {\n  const user = props.user;\n  const [jobs, setJobs] = useState([]);\n\n  useEffect(() => {\n    let isMounted = true;\n    if (props) {\n      axios\n        .post(\"api/recruiter\", user)\n        .then((res) => {\n          if (isMounted) {\n            setJobs(res.data.jobsCreated);\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [props]);\n  const onDeleted = (deletej) => {\n    axios\n      .post(\"api/jobs/delete\", deletej)\n      .then((res) => {\n        axios\n          .post(\"api/recruiter\", user)\n          .then((res) => {\n            setJobs(res.data.jobsCreated);\n          })\n          .catch((err) => {\n            console.log(err);\n          });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  return (\n    <>\n      <div>\n        <h4\n          className=\"grey-text text-darken-4 header left-align\"\n          style={{ margin: \"3rem\" }}\n        >\n          <b>Jobs Listed</b> by you\n        </h4>\n        {jobs\n          .filter((job) => {\n            let positionsLeft = job.positions;\n            if (job.applicants) {\n              job.applicants.forEach((applicant) => {\n                if (applicant.status === \"accepted\") {\n                  positionsLeft--;\n                }\n              });\n            }\n            return positionsLeft;\n          })\n          .map((job, i, jobs) => {\n            if (i % 2 == 0) {\n              return (\n                <div\n                  className=\"row\"\n                  key={jobs[i]._id}\n                  style={{ display: \"flex\" }}\n                >\n                  <div className=\"col s6\">\n                    <Job\n                      user={user}\n                      job={jobs[i]}\n                      history={props.history}\n                      onDeleted={onDeleted}\n                    />\n                  </div>\n\n                  <div className=\"col s6\">\n                    {jobs[i + 1] ? (\n                      <Job\n                        user={user}\n                        job={jobs[i + 1]}\n                        history={props.history}\n                        onDeleted={onDeleted}\n                      />\n                    ) : null}\n                  </div>\n                </div>\n              );\n            }\n          })}\n      </div>\n    </>\n  );\n}\n","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/recruiter/MyEmployees.js",["153","154","155"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport Employee from \"./Employee\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nexport default function MyEmployees(props) {\n  const user = props.user;\n  const [employees, setEmployees] = useState([]);\n  const [filter, setFilter] = useState({ choice: \"name\", asc: \"1\" });\n  const classes = useStyles();\n\n  useEffect(() => {\n    let isMounted = true;\n    axios\n      .post(\"api/recruiter\", user)\n      .then((res) => {\n        if (isMounted) {\n          var jobs = res.data.jobsCreated;\n          var employeeList = [];\n          for (let i = 0; i < jobs.length; i++) {\n            for (let j = 0; j < jobs[i].applicants.length; j++) {\n              if (jobs[i].applicants[j].status === \"accepted\") {\n                employeeList.push({\n                  name: jobs[i].applicants[j].id.name,\n                  userId: jobs[i].applicants[j].id._id,\n                  dateOfJoining: jobs[i].applicants[j].dateOfJoining,\n                  typeOfJob: jobs[i].typeOfJob,\n                  title: jobs[i].title,\n                  rating: jobs[i].applicants[j].id.rating,\n                });\n              }\n            }\n          }\n          setEmployees(employeeList);\n          console.log(employeeList);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  return (\n    <>\n      <div className=\"row\" style={{ width: \"500px\", marginTop: \"2rem\" }}>\n        <div className=\"col s10 offset-s1\">\n          <h4 className=\"grey-text text-darken-4 header left-align\">\n            <b>Employees</b> hired by you\n          </h4>\n        </div>\n      </div>\n      <div\n        className=\"row center-align\"\n        style={{ marginBottom: \"1.6rem\", minWidth: \"80vw\" }}\n      >\n        <div className=\"col s12 center-align\">\n          <p className=\"left-align grey-text text-darken-3\" style={sty}>\n            Sort By:\n          </p>\n          <FormControl className={classes.formControl}>\n            <Select\n              value={filter.choice}\n              onChange={(event) => {\n                setFilter({ ...filter, choice: event.target.value });\n              }}\n            >\n              <MenuItem value=\"name\">Name</MenuItem>\n              <MenuItem value=\"title\">Job Title</MenuItem>\n              <MenuItem value=\"dateOfJoining\">Joining Date</MenuItem>\n              <MenuItem value=\"rating\">Rating</MenuItem>\n            </Select>\n          </FormControl>\n          <p className=\"grey-text text-darken-3\" style={sty}>\n            in\n          </p>\n          <FormControl className={classes.formControl}>\n            <Select\n              value={filter.asc}\n              onChange={(event) => {\n                setFilter({ ...filter, asc: event.target.value });\n              }}\n            >\n              <MenuItem value=\"1\">Ascending</MenuItem>\n              <MenuItem value=\"-1\">Descending</MenuItem>\n            </Select>\n          </FormControl>\n          <p className=\"grey-text text-darken-3\" style={sty}>\n            Order\n          </p>\n        </div>\n      </div>\n      {employees\n        .sort((employees1, employees2) => {\n          if (filter.choice === \"dateOfJoining\")\n            return (\n              (new Date(employees1[\"dateOfJoining\"]) -\n                new Date(employees2[\"dateOfJoining\"])) *\n              parseInt(filter.asc)\n            );\n          else if (filter.choice === \"name\" || filter.choice === \"title\") {\n            if (employees1[filter.choice]) {\n              return (\n                employees1[filter.choice]\n                  .split(\" \")[0]\n                  .localeCompare(employees2[filter.choice].split(\" \")[0]) *\n                parseInt(filter.asc)\n              );\n            } else return false;\n          } else {\n            return (\n              (employees1.rating - employees2.rating) * parseInt(filter.asc)\n            );\n          }\n        })\n        .map((employee, i, employees) => {\n          if (i % 3 == 0) {\n            return (\n              <div\n                className=\"row\"\n                key={employees[i].userId}\n                style={{ display: \"flex\" }}\n              >\n                <div className=\"col s4\">\n                  <Employee employee={employees[i]} />\n                </div>\n                <div className=\"col s4\">\n                  {employees[i + 1] ? (\n                    <Employee employee={employees[i + 1]} />\n                  ) : null}\n                </div>\n                <div className=\"col s4\">\n                  {employees[i + 2] ? (\n                    <Employee employee={employees[i + 2]} />\n                  ) : null}\n                </div>\n              </div>\n            );\n          }\n        })}\n    </>\n  );\n}\nconst sty = {\n  width: \"120px\",\n  display: \"inline-block\",\n};\n","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/utils/saveUser.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/dashboard/Jobs.js",["156","157"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Job from \"./Job\";\nimport Fuse from \"fuse.js\";\nimport \"./../../index.css\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nfunction Jobs(props) {\n  const [jobs, setJobs] = useState([]);\n  const [filter, setFilter] = useState({\n    search: \"\",\n    recruiterName: \"\",\n    duration: \"7\",\n    typeOfJob: \"\",\n    asc: \"1\",\n    slider: [0, 999],\n    choice: \"salary\",\n    maxs: 0,\n    openApps: 0,\n  });\n  const classes = useStyles();\n\n  useEffect(() => {\n    let isMounted = true;\n\n    axios\n      .get(\"api/jobs\")\n      .then((res) => {\n        if (isMounted) {\n          setJobs(res.data);\n          let maxv = 0,\n            count = 0,\n            id = props.user._id;\n          for (let i = 0; i < res.data.length; i++) {\n            if (res.data[i].salary > maxv) maxv = res.data[i].salary;\n            for (let j = 0; j < res.data[i].applicants.length; j++) {\n              if (res.data[i].applicants[j].id === id) {\n                count++;\n              }\n            }\n          }\n          setFilter({\n            ...filter,\n            slider: [filter.slider[0], maxv],\n            maxs: maxv,\n            openApps: count,\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    return () => {\n      isMounted = false;\n    };\n  }, [props]);\n\n  const printJobs = () => {\n    const fuse = new Fuse(jobs, { keys: [\"title\"] });\n    const results = fuse.search(filter.search);\n    const characterResults = filter.search\n      ? results.map((result) => result.item)\n      : jobs;\n    return characterResults\n      .sort(\n        (job1, job2) =>\n          (job1[filter.choice] - job2[filter.choice]) * parseInt(filter.asc)\n      )\n      .filter(\n        (job) =>\n          job.salary >= filter.slider[0] &&\n          job.salary <= filter.slider[1] &&\n          job.duration < filter.duration &&\n          job.typeOfJob\n            .toLowerCase()\n            .includes(filter.typeOfJob.toLowerCase()) &&\n          new Date() < new Date(job.deadline)\n      )\n      .map((job, i, characterResults) => {\n        if (i % 2 === 0) {\n          return (\n            <div\n              className=\"row\"\n              key={characterResults[i]._id}\n              style={{ display: \"flex\" }}\n            >\n              <div className=\"col s6\">\n                <Job user={props.user} job={characterResults[i]} />\n              </div>\n\n              <div className=\"col s6\">\n                {characterResults[i + 1] ? (\n                  <Job user={props.user} job={characterResults[i + 1]} />\n                ) : null}\n              </div>\n            </div>\n          );\n        }\n      });\n  };\n\n  return (\n    <div className=\"center-align\">\n      <h4\n        className=\"grey-text text-darken-4 header left-align\"\n        style={{ fontFamily: \"Bodoni Moda\", padding: \"10px 0px\" }}\n      >\n        JOB LISTING AVAILABLE\n      </h4>\n      <div className=\"row\">\n        <div className=\"input-field col s10 offset-s1\">\n          <i className=\"material-icons prefix\">search</i>\n          <input\n            id=\"icon_prefix\"\n            value={filter.search}\n            type=\"text\"\n            onChange={(e) => setFilter({ ...filter, search: e.target.value })}\n            style={{ minWidth: \"60vw\" }}\n          />\n          <label htmlFor=\"icon_prefix\">Search for Jobs</label>\n        </div>\n      </div>\n      {filter.search ? null : (\n        <>\n          <p className=\"left-align grey-text text-darken-3\" style={sty}>\n            Sort By:\n          </p>\n          <FormControl className={classes.formControl}>\n            <Select\n              value={filter.choice}\n              onChange={(event) => {\n                setFilter({ ...filter, choice: event.target.value });\n              }}\n            >\n              <MenuItem value=\"salary\">Salary</MenuItem>\n              <MenuItem value=\"duration\">Duration</MenuItem>\n              <MenuItem value=\"rating\">Rating</MenuItem>\n            </Select>\n          </FormControl>\n          <p className=\"grey-text text-darken-3\" style={sty}>\n            in\n          </p>\n          <FormControl className={classes.formControl}>\n            <Select\n              value={filter.asc}\n              onChange={(event) => {\n                setFilter({ ...filter, asc: event.target.value });\n              }}\n            >\n              <MenuItem value=\"1\">Ascending</MenuItem>\n              <MenuItem value=\"-1\">Descending</MenuItem>\n            </Select>\n          </FormControl>\n          <p className=\"grey-text text-darken-3\" style={sty}>\n            Order\n          </p>\n          <br/>\n          <fieldset\n            id=\"role\"\n            onChange={(e) => {\n              setFilter({ ...filter, typeOfJob: e.target.value });\n              console.log(filter.openApps);\n            }}\n            style={{ border: 0, display: \"inline-block\", paddingTop: \"35px\" }}\n          >\n            <span className=\"grey-text text-darken-3    \">\n              <b>Job Type:</b>\n            </span>\n            <label style={{ padding: \"0px 40px 0px 40px\" }}>\n              <input\n                className=\"with-gap\"\n                name=\"role\"\n                type=\"radio\"\n                value=\"\"\n                defaultChecked\n              />\n              <span className=\"grey-text text-darken-3\">All</span>\n            </label>\n            <label style={{ paddingRight: \"20px\" }}>\n              <input\n                className=\"with-gap\"\n                name=\"role\"\n                type=\"radio\"\n                value=\"Full-Time\"\n              />\n              <span className=\"grey-text text-darken-3\">Full-Time</span>\n            </label>\n            <label style={{ paddingRight: \"20px\" }}>\n              <input\n                className=\"with-gap\"\n                name=\"role\"\n                type=\"radio\"\n                value=\"Part-Time\"\n              />\n              <span className=\"grey-text text-darken-3\">Part-Time</span>\n            </label>\n            <label>\n              <input\n                className=\"with-gap\"\n                name=\"role\"\n                type=\"radio\"\n                value=\"Work from Home\"\n              />\n              <span className=\"grey-text text-darken-3\">Work from Home</span>\n            </label>\n          </fieldset>\n          <div className=\"row\" style={{ paddingTop: \"20px\" }}>\n            <div className=\"col s1\">\n              <span className=\"grey-text text-darken-3\">\n                <b>Salary:</b>\n              </span>\n            </div>\n            <div className=\"col s2 black-text\">Rs {filter.slider[0]}/month</div>\n            <div className=\"col s6\">\n              <Slider\n                max={filter.maxs}\n                value={filter.slider}\n                onChange={(event, newValue) =>\n                  setFilter({ ...filter, slider: newValue })\n                }\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"range-slider\"\n              />\n            </div>\n            <div className=\"col s3\">Rs {filter.slider[1]}/month</div>\n          </div>\n          <div className=\"row\">\n            <div\n              className=\"col s3 offset-s2\"\n              style={{ height: \"50px\", paddingTop: \"23px\" }}\n            >\n              <span className=\"grey-text text-darken-3 right-align\">\n                <b>Duration:</b>&emsp; Less than\n              </span>\n            </div>\n            <div className=\"input-field col s1\">\n              <FormControl className={classes.formControl}>\n                <Select\n                  value={filter.duration}\n                  onChange={(event) => {\n                    setFilter({ ...filter, duration: event.target.value });\n                  }}\n                >\n                  <MenuItem value=\"1\">1</MenuItem>\n                  <MenuItem value=\"2\">2</MenuItem>\n                  <MenuItem value=\"3\">3</MenuItem>\n                  <MenuItem value=\"4\">4</MenuItem>\n                  <MenuItem value=\"5\">5</MenuItem>\n                  <MenuItem value=\"6\">6</MenuItem>\n                  <MenuItem value=\"7\">7</MenuItem>\n                </Select>\n              </FormControl>\n            </div>\n            <div\n              className=\"col s3\"\n              style={{ height: \"50px\", paddingTop: \"23px\" }}\n            >\n              <span className=\"grey-text text-darken-3 left-align\">months</span>\n            </div>\n          </div>\n        </>\n      )}\n      {printJobs()}\n    </div>\n  );\n}\nconst sty = {\n  width: \"120px\",\n  display: \"inline-block\",\n};\nexport default Jobs;\n","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/recruiter/Applicant.js",["158","159"],"import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport Button from \"@material-ui/core/Button\";\n\nfunction StarIcon(props) {\n  const { fill = \"yellow\" } = props;\n  return (\n    <svg\n      style={{ height: \"22px\", width: \"22px\" }}\n      fill={fill}\n      stroke=\"currentColor\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"\n      ></path>\n    </svg>\n  );\n}\n\nexport default function Applicant(props) {\n  const [status, setStatus] = useState(props.applicant.status);\n\n  const applicant = props.applicant.id;\n  useEffect(() => {\n    let isMounted = true;\n    axios\n      .post(\"api/applicant\", applicant)\n      .then((res) => {\n        if (isMounted) {\n          for (let i = 0; i < res.data.jobsApplied.length; i++) {\n            if (\n              res.data.jobsApplied[i].status === \"accepted\" &&\n              res.data.jobsApplied[i].id &&\n              res.data.jobsApplied[i].id._id !== props.job._id\n            ) {\n              setStatus(\"rejected\");\n            }\n            if (res.data.jobsApplied[i].id == props.job._id) {\n              setStatus(res.data.jobsApplied[i].status);\n            }\n          }\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  const printSkills = () => {\n    let skills = \"\";\n    for (let i = 0; i < applicant.skills.length - 1; i++) {\n      skills += applicant.skills[i] + \", \";\n    }\n    skills += applicant.skills[applicant.skills.length - 1];\n    return skills;\n  };\n  const onReject = () => {\n    if (status !== \"accepted\") {\n      const newJob = {\n        _id: props.job._id,\n        applicant: {\n          status: \"rejected\",\n          id: applicant._id,\n        },\n      };\n      axios\n        .post(\"api/jobs/updateStatus\", newJob)\n        .then((res) => {\n          setStatus(\"rejected\");\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n  const onClick = () => {\n    if (status === \"applied\") {\n      const newJob = {\n        _id: props.job._id,\n        applicant: {\n          status: \"shortlisted\",\n          id: applicant._id,\n        },\n      };\n      axios\n        .post(\"api/jobs/updateStatus\", newJob)\n        .then((res) => {\n          console.log(res.data);\n          setStatus(\"shortlisted\");\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    } else if (status === \"shortlisted\") {\n      const newJob = {\n        _id: props.job._id,\n        applicant: {\n          status: \"accepted\",\n          id: applicant._id,\n          dateOfJoining: new Date(),\n        },\n      };\n      props.checkPostions(newJob);\n      setStatus(\"accepted\");\n    }\n  };\n  const download = () => {\n    let filename = applicant.resumeName ? applicant.resumeName : \"\";\n    if (filename === \"\") {\n      alert(\"File not uploaded\");\n      return;\n    }\n    const data = {\n      filename: filename,\n      user: applicant._id,\n    };\n    axios\n      .post(\"http://localhost:5000/download\", data, { responseType: \"blob\" })\n      .then((response) => {\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.setAttribute(\"download\", filename);\n        document.body.appendChild(link);\n        link.click();\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  const colors = () => {\n    if (status === \"applied\") {\n      return \"#ffe087\";\n    } else if (status === \"shortlisted\") {\n      return \"#5c74ec\";\n    } else {\n      return \"#00ab66\";\n    }\n  };\n  const font = () => {\n    if (status === \"applied\") {\n      return \"black\";\n    }\n  };\n  return status === \"rejected\" ? null : (\n    <div className=\"card\" style={{ minHeight: \"200px\", minWidth: \"80vw\" }}>\n      <div className=\"row\">\n        <div className=\"col s8\">\n          <div className=\"card-content black-text\">\n            <span\n              className=\"card-title left-align\"\n              style={{ fontSize: \"22px\" }}\n            >\n              <div className=\"row\" style={{ marginBottom: \"0.3rem\" }}>\n                <div className=\"col\">\n                  <b>Name:</b>&nbsp; {applicant.name}{\" \"}\n                </div>\n                <div\n                  className=\"box flex\"\n                  style={{ paddingBottom: \"0.5rem\", paddingTop: \"0.5rem\" }}\n                >\n                  {[1, 2, 3, 4, 5].map((index) => {\n                    var fill;\n                    if (index <= applicant.rating) fill = \"yellow\";\n                    else fill = \"none\";\n                    return <StarIcon key={index} fill={fill} />;\n                  })}\n                </div>\n              </div>\n            </span>\n\n            <p className=\"left-align\" style={sty}>\n              <b>Skills:</b> &nbsp;\n              {applicant.skills.length ? printSkills(applicant.skills) : null}\n            </p>\n            <p className=\"left-align\" style={sty}>\n              <b>Date of Application:</b> &nbsp;\n              {moment(props.applicant.dateOfApplication).format(\"ll\")}\n            </p>\n            <p className=\"left-align\" style={sty}>\n              <b>SOP:</b> &nbsp;{props.applicant.sop}\n            </p>\n            <p className=\"left-align\" style={sty}>\n              <b>Education:</b> &nbsp;\n              {applicant.education.map((education) => {\n                return (\n                  <span key={education._id}>\n                    {education.institutionName} ({education.startYear}-\n                    {education.endYear})\n                    <br />\n                  </span>\n                );\n              })}\n            </p>\n            <div className=\"left-align\" style={{ marginTop: \"0.8rem\" }}>\n              <Button\n                style={{ marginLeft: \"2rem\" }}\n                color=\"primary\"\n                className=\"btn btn-small\"\n                onClick={(e) => {\n                  download();\n                }}\n              >\n                <i className=\"material-icons\">arrow_downward</i>\n                Resume\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col s1\" style={{ height: \"200px\", display: \"grid\" }}>\n          <button\n            className=\"waves-effect waves-light btn-large button\"\n            onClick={onClick}\n            disabled={props.disabled}\n            style={{ margin: \"auto\", backgroundColor: colors(), color: font() }}\n          >\n            {status === \"applied\"\n              ? \"SHORTLIST\"\n              : status === \"shortlisted\"\n              ? \"ACCEPT\"\n              : \"ACCEPTED\"}\n          </button>\n        </div>\n        {status === \"accepted\" ? null : (\n          <div className=\"col s3\" style={{ height: \"200px\", display: \"grid\" }}>\n            <button\n              className=\"waves-effect waves-light btn-large button\"\n              onClick={onReject}\n              style={{ margin: \"auto\", backgroundColor: \"#CA0B00\" }}\n            >\n              REJECT\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst sty = {\n  padding: \"0.3rem 0\",\n};\n","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/layout/Navbar.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/tabs/ProfileR.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/applicant/MyApplication.js",["160","161"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Application from \"./Application\";\nexport default function MyApplication(props) {\n  const user = props.user;\n  const [applications, setApplications] = useState([]);\n\n  useEffect(() => {\n    let isMounted = true;\n    axios\n      .post(\"api/applicant\", user)\n      .then((res) => {\n        if (isMounted) {\n          console.log(res.data);\n          var jobs = res.data.jobsApplied;\n          var applicationsL = [];\n          for (let i = 0; i < jobs.length; i++) {\n            if (jobs[i].id) {\n              for (let j = 0; j < jobs[i].id.applicants.length; j++) {\n                if (jobs[i].id.applicants[j].id === props.user._id) {\n                  applicationsL.push({\n                    userId: props.user._id,\n                    title: jobs[i].id.title,\n                    recruiterName: jobs[i].id.recruiterName,\n                    dateOfJoining: jobs[i].id.applicants[j].dateOfJoining,\n                    salary: jobs[i].id.salary,\n                    rating: jobs[i].id.applicants[j].rating,\n                    id: jobs[i].id,\n                    status: jobs[i].id.applicants[j].status,\n                  });\n                }\n              }\n            }\n          }\n          console.log(applicationsL);\n          setApplications(applicationsL);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n  return (\n    <React.Fragment>\n      <div className=\"row\" style={{ width: \"80vw\", marginTop: \"2rem\" }}>\n        <div className=\"col s10 offset-s1\">\n          <h4 className=\"grey-text text-darken-4 header left-align \">\n            Your <b>APPLICATIONS</b>\n          </h4>\n        </div>\n      </div>\n\n      {applications.map((application, i, applications) => {\n        if (i % 3 === 0) {\n          return (\n            <div\n              className=\"row\"\n              key={applications[i].userId}\n              style={{ display: \"flex\" }}\n            >\n              <div className=\"col s4\">\n                <Application application={applications[i]} />\n              </div>\n              <div className=\"col s4\">\n                {applications[i + 1] ? (\n                  <Application application={applications[i + 1]} />\n                ) : null}\n              </div>\n              <div className=\"col s4\">\n                {applications[i + 2] ? (\n                  <Application application={applications[i + 2]} />\n                ) : null}\n              </div>\n            </div>\n          );\n        }\n      })}\n    </React.Fragment>\n  );\n}\n","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/tabs/ProfileA.js",["162"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport CreatableSelect from \"react-select/creatable\";\nimport { saveUser } from \"../../utils/saveUser\";\nimport axios from \"axios\";\nimport \"./../../index.css\";\nimport profile from \"./../../profile.png\";\nimport Button from \"@material-ui/core/Button\";\n\nlet skills = [\n  { value: \"C\", label: \"C\" },\n  { value: \"C++\", label: \"C++\" },\n  { value: \"JavaScript\", label: \"JavaScript\" },\n  { value: \"HTML/CSS\", label: \"HTML/CSS\" },\n  { value: \"Machine Learning\", label: \"Machine Learning\" },\n  { value: \"React\", label: \"React\" },\n  { value: \"Flask\", label: \"Flask\" },\n  { value: \"Flutter\", label: \"Flutter\" },\n  { value: \"React\", label: \"React\" },\n  { value: \"Python\", label: \"Python\" },\n];\nexport class ProfileA extends Component {\n  constructor() {\n    super();\n    this.state = {\n      id: \"\",\n      name: \"\",\n      email: \"\",\n      number: \"\",\n      education: [\n        {\n          institutionName: \"\",\n          startYear: \"\",\n          endYear: \"\",\n        },\n      ],\n      skills: [],\n      errors: {\n        education: [{}],\n      },\n      disabled: true,\n      role: \"\",\n    };\n  }\n  componentDidMount() {\n    this._isMounted = true;\n\n    const data = this.props.user;\n    data.userId = data._id;\n    console.log(data);\n    axios\n      .post(\"/api/applicant\", data)\n      .then((res) => {\n        if (this._isMounted) {\n          this.setState({\n            id: res.data._id,\n            name: res.data.name ? res.data.name : \"\",\n            email: res.data.email ? res.data.email : \"\",\n            number: res.data.number ? res.data.number : \"\",\n            education: res.data.education ? res.data.education : [{}],\n            skills: res.data.skills ? res.data.skills : [{}],\n            role: data.role ? data.role : \"\",\n            resumeName: res.data.resumeName ? res.data.resumeName : \"\",\n            imageName: res.data.imageName ? res.data.imageName : \"\",\n          });\n          if (res.data.imageName) {\n            const data2 = {\n              filename: res.data.imageName,\n              user: res.data._id,\n            };\n            axios\n              .post(\"http://localhost:5000/download\", data2, {\n                responseType: \"blob\",\n              })\n              .then((response) => {\n                const url = window.URL.createObjectURL(\n                  new Blob([response.data])\n                );\n                document.querySelector(\"#profilePic\").src = url;\n              })\n              .catch((err) => {\n                console.log(err);\n              });\n          }\n        }\n      })\n      .catch((err) => console.log(err));\n  }\n  handleValidation() {\n    let errors = {\n      education: [],\n    };\n    for (let i = 0; i < this.state.education.length; i++) {\n      errors.education.push({});\n    }\n    let formIsValid = true;\n    //Name\n    if (this.state.name === \"\") {\n      formIsValid = false;\n      errors[\"name\"] = \"Name cannot be empty\";\n    }\n    //Email\n    if (this.state.email === \"\") {\n      formIsValid = false;\n      errors[\"email\"] = \"Email cannot be empty\";\n    }\n    if (typeof this.state.email !== \"undefined\") {\n      let lastAtPos = this.state.email.lastIndexOf(\"@\");\n      let lastDotPos = this.state.email.lastIndexOf(\".\");\n\n      if (\n        !(\n          lastAtPos < lastDotPos &&\n          lastAtPos > 0 &&\n          this.state.email.indexOf(\"@@\") === -1 &&\n          lastDotPos > 2 &&\n          this.state.email.length - lastDotPos > 2\n        )\n      ) {\n        formIsValid = false;\n        errors[\"email\"] = \"Email is not valid\";\n      }\n    }\n    //number\n    if (!this.state.number.toString().match(/^[0-9]+$/)) {\n      formIsValid = false;\n      errors[\"number\"] = \"Phone Number can only be numnerical\";\n    }\n    if (this.state.number === \"\") {\n      formIsValid = false;\n      errors[\"number\"] = \"Phone Number cannot be empty\";\n    }\n    if (parseInt(this.state.number) <= 0) {\n      formIsValid = false;\n      errors[\"number\"] = \"Phone Number cannot be negative\";\n    }\n    if (\n      (this.state.number.length < 10 || this.state.number.length > 11) &&\n      this.state.number.length !== 0\n    ) {\n      formIsValid = false;\n      errors[\"number\"] = \"Invalid Phone Number\";\n    }\n    //education\n    for (let i = 0; i < this.state.education.length; i++) {\n      if (this.state.education[i].institutionName === \"\") {\n        formIsValid = false;\n        errors.education[i].institutionName = \"Insitution Name cannot be empty\";\n      }\n      if (this.state.education[i].startYear === \"\") {\n        formIsValid = false;\n        errors.education[i].startYear = \"Start Year cannot be empty\";\n      }\n      if (\n        this.state.education[i].startYear < 1900 ||\n        this.state.education[i].startYear > 2020\n      ) {\n        formIsValid = false;\n        errors.education[i].startYear = \"Invalid Year\";\n      }\n      if (\n        (this.state.education[i].endYear < 1900 ||\n          this.state.education[i].endYear > 3020) &&\n        !this.state.education[i].endYear === \"\"\n      ) {\n        formIsValid = false;\n        errors.education[i].endYear = \"Invalid Year\";\n      }\n      if (\n        this.state.education[i].startYear > this.state.education[i].endYear &&\n        !this.state.education[i].endYear === \"\"\n      ) {\n        formIsValid = false;\n        errors.education[i].endYear = \"End Year cannot be less than Start Year\";\n      }\n    }\n    this.setState({ errors: errors });\n    return formIsValid;\n  }\n\n  onChange = (e) => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n\n  createUI() {\n    const { errors } = this.state;\n    return this.state.education.map((el, i) => (\n      <React.Fragment key={i}>\n        <div className=\"row\" style={{ marginBottom: \"0px\" }}>\n          <div\n            className=\"input-field col s12\"\n            style={{ margin: \"2px 0\" }}\n            key={i}\n          >\n            <span style={sty}>Institution Name</span>\n            <input\n              type=\"text\"\n              disabled={this.state.disabled}\n              value={el.institutionName || \"\"}\n              id=\"institutionName\"\n              className={classnames(\"\", {\n                invalid: errors.education[i]\n                  ? errors.education[i].institutionName\n                  : null,\n              })}\n              onChange={this.handleChange.bind(this, i)}\n            />\n            <span className=\"red-text\">\n              {errors.education[i] ? errors.education[i].institutionName : null}\n            </span>\n          </div>\n        </div>\n        <div className=\"row\" style={{ marginBottom: \"0px\" }}>\n          <div className=\"input-field col s4\" style={{ margin: \"2px 0\" }}>\n            <span style={sty}>Start Year</span>\n            <input\n              type=\"number\"\n              disabled={this.state.disabled}\n              value={el.startYear || \"\"}\n              id=\"startYear\"\n              onChange={this.handleChange.bind(this, i)}\n              className={classnames(\"\", {\n                invalid: errors.education[i]\n                  ? errors.education[i].startYear\n                  : null,\n              })}\n            />\n            <span className=\"red-text\">\n              {errors.education[i] ? errors.education[i].startYear : null}\n            </span>\n          </div>\n          <div\n            className=\"input-field col s4 offset-s1\"\n            style={{ margin: \"2px 0\" }}\n          >\n            <span style={sty}>End Year</span>\n            <input\n              type=\"number\"\n              disabled={this.state.disabled}\n              value={el.endYear || \"\"}\n              id=\"endYear\"\n              onChange={this.handleChange.bind(this, i)}\n              className={classnames(\"\", {\n                invalid: errors.education[i]\n                  ? errors.education[i].endYear\n                  : null,\n              })}\n            />\n            <span className=\"red-text\">\n              {errors.education[i] ? errors.education[i].endYear : null}\n            </span>\n          </div>\n          <div className=\"col s3 valign-wrapper\" style={{ height: \"79px\" }}>\n            {this.state.disabled ? null : (\n              <input\n                type=\"button\"\n                className=\"btn btn-small\"\n                style={{ backgroundColor: \"red\", margin: \"0 auto\" }}\n                value=\"X\"\n                onClick={this.removeClick.bind(this, i)}\n              />\n            )}\n          </div>\n        </div>\n      </React.Fragment>\n    ));\n  }\n  handleChange(i, event) {\n    let education = [...this.state.education];\n    education[i][event.target.id] = event.target.value;\n    this.setState({ education: education });\n  }\n  addClick() {\n    this.setState((prevState) => ({\n      education: [\n        ...prevState.education,\n        {\n          institutionName: \"\",\n          startYear: \"\",\n          endYear: \"\",\n        },\n      ],\n    }));\n    this.setState((prevState) => ({\n      errors: {\n        ...prevState.errors,\n        education: [...prevState.errors.education, {}],\n      },\n    }));\n  }\n  removeClick(i) {\n    let education = [...this.state.education];\n    education.splice(i, 1);\n    this.setState({ education });\n    let educatione = [...this.state.errors.education];\n    educatione.splice(i, 1);\n    this.setState((prevState) => ({\n      errors: { ...prevState.errors, education: educatione },\n    }));\n  }\n\n  onChangeSkill = (newValue: any, actionMeta: any) => {\n    this.setState({\n      skills: newValue ? newValue.map((newValue) => newValue.value) : [],\n    });\n  };\n\n  download = (type) => {\n    let filename;\n    if (type === \"resume\") {\n      filename = this.state.resumeName;\n    } else if (type === \"image\") {\n      filename = this.state.imageName;\n    }\n    if (filename === \"\") {\n      alert(\"File not uploaded\");\n      return;\n    }\n    const data = {\n      filename: filename,\n      user: this.state.id,\n    };\n    axios\n      .post(\"http://localhost:5000/download\", data, { responseType: \"blob\" })\n      .then((response) => {\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.setAttribute(\"download\", filename);\n        document.body.appendChild(link);\n        link.click();\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  uploadFile = (e) => {\n    let file = e.target.files[0];\n    if (e.target.name === \"resume\" && file.type !== \"application/pdf\") {\n      alert(\"Only PDF allowed\");\n      return;\n    }\n    if (\n      e.target.name === \"image\" &&\n      file.type !== \"image/jpeg\" &&\n      file.type !== \"image/png\"\n    ) {\n      alert(\"Only png and jpeg allowed\");\n      return;\n    }\n    let data = new FormData();\n    data.append(\"file\", e.target.files[0]);\n    data.append(\"user\", this.state.id);\n    data.append(\"type\", e.target.name);\n    axios\n      .post(\"http://localhost:5000/upload\", data, {\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n      })\n      .then((res) => {\n        if (e.target.name === \"resume\") {\n          this.setState({ resumeName: res.data.resumeName });\n        } else if (e.target.name === \"image\") {\n          this.setState({ imageName: res.data.imageName });\n          const url = window.URL.createObjectURL(e.target.files[0]);\n          document.querySelector(\"#profilePic\").src = url;\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    if (this.handleValidation()) {\n      this.setState((prevState) => ({ disabled: !prevState.disabled }));\n      const userData = {\n        id: this.state.id,\n        name: this.state.name,\n        email: this.state.email,\n        number: this.state.number,\n        education: this.state.education,\n        skills: this.state.skills,\n        role: this.state.role,\n      };\n      if (this.state.disabled === false) {\n        saveUser(userData).then(() =>\n          window.M.toast({ html: \"Details Updated!\" }, 2000)\n        );\n      }\n    }\n  };\n\n  render() {\n    const { errors } = this.state;\n    return (\n      <React.Fragment>\n        <div className=\"container valign-wrapper\">\n          <div\n            className=\"row\"\n            style={{ margin: \"30px 0px 30px 0px\", width: \"100%\" }}\n          >\n            <div className=\"col s10 offset-s1\">\n              <div className=\"col s12\">\n                <h4>\n                  <b>Personal Details</b>\n                </h4>\n              </div>\n              <div\n                class=\"col s12 center-align\"\n                style={{ marginTop: \"1.5rem\", marginBottom: \"0.5rem\" }}\n              >\n                <img\n                  src={profile}\n                  style={{ height: \"10rem\", width: \"10rem\" }}\n                  alt=\"\"\n                  id=\"profilePic\"\n                  class=\"circle responsive-img\"\n                />\n              </div>\n              <div\n                class=\"col s12 center-align\"\n                style={{ marginBottom: \"0.5rem\" }}\n              >\n                <Button component=\"label\" variant=\"contained\" color=\"primary\">\n                  <input\n                    hidden\n                    name=\"image\"\n                    type=\"file\"\n                    onChange={(e) => (e.target ? this.uploadFile(e) : null)}\n                  />\n                  Change DP\n                </Button>\n              </div>\n              <form onSubmit={this.onSubmit}>\n                <div\n                  className=\"input-field col s12\"\n                  style={{ margin: \"2px 0\" }}\n                >\n                  <span style={sty}>Name</span>\n                  <input\n                    onChange={this.onChange}\n                    disabled={this.state.disabled}\n                    value={this.state.name}\n                    error={errors.name}\n                    id=\"name\"\n                    type=\"text\"\n                    className={classnames(\"\", {\n                      invalid: errors.name,\n                    })}\n                  />\n                  <span className=\"red-text\">{errors.name}</span>\n                </div>\n                <div\n                  className=\"input-field col s12\"\n                  style={{ margin: \"2px 0\" }}\n                >\n                  <span style={sty}>E-mail</span>\n                  <input\n                    onChange={this.onChange}\n                    disabled={this.state.disabled}\n                    value={this.state.email}\n                    error={errors.email}\n                    id=\"email\"\n                    type=\"text\"\n                    className={classnames(\"\", {\n                      invalid: errors.email,\n                    })}\n                  />\n                  <span className=\"red-text\">{errors.email}</span>\n                </div>\n                <div\n                  className=\"input-field col s12\"\n                  style={{ margin: \"2px 0\" }}\n                >\n                  <span style={sty}>Phone Number</span>\n                  <input\n                    onChange={this.onChange}\n                    disabled={this.state.disabled}\n                    value={this.state.number}\n                    error={errors.number}\n                    id=\"number\"\n                    type=\"number\"\n                    className={classnames(\"\", {\n                      invalid: errors.number,\n                    })}\n                  />\n                  <span className=\"red-text\">{errors.number}</span>\n                </div>\n                <span\n                  style={{ marginLeft: \"10px\", fontSize: \"16px\" }}\n                  className=\"black-text\"\n                >\n                  Education:\n                </span>\n                <br />\n                <div className=\"row\">\n                  <div\n                    className=\"col s10 offset-s2\"\n                    style={{ paddingTop: \"10px\" }}\n                  >\n                    {this.createUI()}\n                    {this.state.disabled ? null : (\n                      <input\n                        className=\"btn btn-small\"\n                        disabled={this.state.disabled}\n                        type=\"button\"\n                        value=\"add more\"\n                        onClick={this.addClick.bind(this)}\n                      />\n                    )}\n                  </div>\n                </div>\n                <span\n                  style={{ marginLeft: \"10px\", fontSize: \"16px\" }}\n                  className=\"black-text\"\n                >\n                  Skills:\n                </span>\n                <br />\n                <div className=\"row\" style={{ padding: \"10px 0px\" }}>\n                  <div\n                    className=\"col s11 offset-s1\"\n                    style={{ marginBottom: \"1rem\" }}\n                  >\n                    {this.state.skills.map((skill, index) => (\n                      <span key={index}>\n                        <span\n                          className=\"white-text\"\n                          style={{\n                            backgroundColor: \"#5c74ec\",\n                            borderRadius: \"3px\",\n                            margin: \"2rem 0\",\n                            padding: \"0.4rem\",\n                          }}\n                        >\n                          {skill}\n                        </span>\n                        <span> </span>\n                      </span>\n                    ))}\n                  </div>\n                  <div className=\"col s11 offset-s1\">\n                    <CreatableSelect\n                      isMulti\n                      isDisabled={this.state.disabled}\n                      closeMenuOnSelect={false}\n                      onChange={this.onChangeSkill}\n                      options={skills}\n                      styles={{\n                        menu: (base) => ({ ...base, position: \"relative\" }),\n                      }}\n                    />\n                  </div>\n                </div>\n                <div\n                  className=\"col s1\"\n                  style={{ marginLeft: \"10px\", fontSize: \"16px\" }}\n                  className=\"black-text\"\n                >\n                  Resume:\n                </div>\n                <div\n                  className=\"col s11 offset-s1 center-align\"\n                  style={{ marginBottom: \"2rem\" }}\n                >\n                  <Button component=\"label\" variant=\"contained\" color=\"primary\">\n                    <input\n                      hidden\n                      name=\"resume\"\n                      type=\"file\"\n                      onChange={(e) => (e.target ? this.uploadFile(e) : null)}\n                    />\n                    <i className=\"material-icons\">arrow_upward</i>\n                    Upload Resume\n                  </Button>\n                  <Button\n                    style={{ marginLeft: \"2rem\" }}\n                    color=\"primary\"\n                    className=\"btn btn-small\"\n                    onClick={(e) => {\n                      this.download(\"resume\");\n                    }}\n                  >\n                    <i className=\"material-icons\">arrow_downward</i>\n                    Resume\n                  </Button>\n                </div>\n                <div className=\"col s12\">\n                  <input\n                    className=\"btn btn-large\"\n                    style={{\n                      borderRadius: \"3px\",\n                      letterSpacing: \"1.5px\",\n                      marginTop: \"10px\",\n                    }}\n                    type=\"submit\"\n                    value={this.state.disabled ? \"Edit\" : \"Save\"}\n                  />\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst sty = {\n  fontSize: \"13px\",\n  color: \"#9e9e9e\",\n};\nconst mapStateToProps = (state) => ({});\n\nexport default connect(mapStateToProps)(withRouter(ProfileA));\n","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/reducers/index.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/recruiter/Job.js",[],"/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/recruiter/Employee.js",["163"],"import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport RatingIcon from \"../../utils/rating\";\nimport axios from \"axios\";\n\nexport default function Employee(props) {\n  const employee = props.employee;\n  const [rating, setRating] = React.useState(0);\n  const [hoverRating, setHoverRating] = React.useState(0);\n  useEffect(() => {\n    let isMounted = true;\n    if (isMounted) {\n      setRating(props.employee.rating);\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [props]);\n\n  const onMouseEnter = (index) => {\n    setHoverRating(index);\n  };\n  const onMouseLeave = () => {\n    setHoverRating(0);\n  };\n  const onSaveRating = (index) => {\n    const newRating = {\n      id: props.employee.userId,\n      rating: index,\n    };\n    axios\n      .post(\"api/applicant/saveRating\", newRating)\n      .then((res) => {\n        setRating(index);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  return (\n    <div className=\"card\" style={{ minHeight: \"130px\", minWidth: \"15vw\" }}>\n      <div className=\"row \" style={{ display: \"flex\" }}>\n        <div className=\"col s12\">\n          <div\n            className=\"card-content black-text\"\n            style={{ paddingRight: \"1rem\", paddingBottom: \"1rem\" }}\n          >\n            <span\n              className=\"card-title left-align\"\n              style={{ fontSize: \"22px\" }}\n            >\n              <b>{employee.name}</b>\n            </span>\n            <p\n              className=\"left-align\"\n              style={{ padding: \"0.3rem 0\", fontSize: \"18px\" }}\n            >\n              {employee.title}\n              {\", \"}\n              <span style={{ fontSize: \"0.9rem\" }}>{employee.typeOfJob}</span>\n            </p>\n            <p className=\"left-align\" style={sty}>\n              <span style={{ fontSize: \"0.85rem\" }}>Joined:</span>&nbsp;\n              {moment(employee.dateOfJoining).format(\"LL\")}\n            </p>\n            <div className=\"box flex\" style={{ paddingTop: \"0.7rem\" }}>\n              {[1, 2, 3, 4, 5].map((index) => {\n                return (\n                  <RatingIcon\n                    key={index}\n                    index={index}\n                    rating={rating}\n                    hoverRating={hoverRating}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    onSaveRating={onSaveRating}\n                  />\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nconst sty = {\n  padding: \"0.3rem 0\",\n};\n","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/dashboard/Job.js",["164"],"import React, { useState, useEffect } from \"react\";\nimport \"./../../index.css\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport axios from \"axios\";\n\nfunction StarIcon(props) {\n  const { fill = \"yellow\" } = props;\n  return (\n    <svg\n      style={{ height: \"22px\", width: \"22px\" }}\n      fill={fill}\n      stroke=\"currentColor\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"\n      ></path>\n    </svg>\n  );\n}\n\nfunction Job(props) {\n  const job = props.job;\n  const [open, setOpen] = React.useState(false);\n  const [open1, setOpen1] = React.useState(false);\n  const [open2, setOpen2] = React.useState(false);\n  const [sop, setSop] = useState(\"\");\n  const [buttonValue, setButtonValue] = useState(\"APPLY\");\n  const [error, setError] = useState(\"\");\n  const [disabled, setDisabled] = useState(false);\n\n  useEffect(() => {\n    if (job.applicants.length >= job.applications) {\n      setButtonValue(\"FULL\");\n    }\n    var count = 0;\n    for (let i = 0; i < job.applicants.length; i++) {\n      if (job.applicants[i].status === \"accepted\") count++;\n      if (job.positions <= count) {\n        setButtonValue(\"FULL\");\n      }\n    }\n    for (var i = 0; i < job.applicants.length; i++) {\n      if (job.applicants[i].id === props.user._id) {\n        setButtonValue(\"APPLIED\");\n        break;\n      }\n    }\n  });\n  const handleClickOpen = () => {\n    if (buttonValue === \"APPLY\") {\n      var employed = false;\n      for (let i = 0; i < props.user.jobsApplied.length; i++) {\n        if (props.user.jobsApplied[i].status === \"accepted\") {\n          employed = true;\n          break;\n        }\n      }\n      if (employed) {\n        setOpen(false);\n        setOpen2(true);\n      } else {\n        setOpen(true);\n      }\n    }\n  };\n  const handleValidation = () => {\n    let error = \"\";\n    let valid = true;\n    if (sop === \"\") {\n      valid = false;\n      error = \"SOP can't be empty\";\n    }\n    if (sop === \"\\n\") {\n      valid = false;\n      error = \"SOP can't be empty\";\n    }\n    if (sop.length > 250) {\n      valid = false;\n      error = \"SOP can't be more than 250 words\";\n    }\n    setError(error);\n    return valid;\n  };\n  const handleClose = () => {\n    setOpen(false);\n    setSop(\"\");\n    setError(\"\");\n  };\n  const apply = (e) => {\n    if (handleValidation()) {\n      setDisabled(true);\n      const newJob = {\n        id: job._id,\n        applicant: {\n          id: props.user._id,\n          status: \"applied\",\n          sop: sop,\n          dateOfApplication: new Date(),\n        },\n      };\n\n      axios\n        .post(\"api/jobs/addApplicant\", newJob)\n        .then((res) => {\n          console.log(res.data);\n          if (res.data === \"error\") {\n            setOpen(false);\n            setOpen1(true);\n          } else {\n            setButtonValue(\"APPLIED\");\n            setOpen(false);\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n  const colors = () => {\n    if (buttonValue === \"APPLIED\") {\n      return \"#00ab66\";\n    } else if (buttonValue === \"FULL\") {\n      return \"#cf142b\";\n    } else {\n      return \"#5c74ec\";\n    }\n  };\n  const getTimes = () => {\n    var date = new Date(job.deadline);\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    var ampm = hours >= 12 ? \"pm\" : \"am\";\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    var strTime = hours + \":\" + minutes + \" \" + ampm;\n    return strTime;\n  };\n  const getDates = (date) => {\n    var monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    var dateObj = new Date(date);\n    return (\n      dateObj.getDate() +\n      \" \" +\n      monthNames[dateObj.getMonth()] +\n      \" \" +\n      dateObj.getFullYear()\n    );\n  };\n  return (\n    <div\n      className=\"card\"\n      style={{ minHeight: \"200px\", maxWidth: \"40vw\", minWidth: \"35vw\" }}\n    >\n      <div className=\"row \" style={{ display: \"flex\" }}>\n        <div className=\"col s8\">\n          <div\n            className=\"card-content black-text\"\n            style={{ paddingRight: \"0\" }}\n          >\n            <div\n              className=\"card-title left-align\"\n              style={{ fontSize: \"24px\", marginBottom: \"0\" }}\n            >\n              {job.title}\n            </div>\n            <p className=\"left-align\" style={{ fontSize: \"0.85rem\" }}>\n              By &nbsp;{job.recruiterName}\n            </p>\n            <div\n              className=\"box flex\"\n              style={{ paddingBottom: \"0.5rem\", paddingTop: \"0.5rem\" }}\n            >\n              {[1, 2, 3, 4, 5].map((index) => {\n                var fill;\n                if (index <= job.rating) fill = \"yellow\";\n                else fill = \"none\";\n\n                return <StarIcon key={index} fill={fill} />;\n              })}\n            </div>\n            <p className=\"left-align\" style={sty}>\n              <b>Salary:</b> &nbsp;Rs {job.salary}/month\n            </p>\n            <p className=\"left-align\" style={sty}>\n              <b>Duration:</b> &nbsp;\n              {job.duration ? job.duration : \"Indefinite\"}{\" \"}\n              {job.duration ? \"months\" : null}\n            </p>\n            <p className=\"left-align\" style={sty}>\n              <b>Type:</b> &nbsp;{job.typeOfJob}\n            </p>\n            <p className=\"left-align\" style={sty}>\n              <b>Deadline:</b> &nbsp;{getDates(job.deadline)} at {getTimes()}\n            </p>\n          </div>\n        </div>\n        <div className=\"col s4 left-align\" style={{ display: \"grid\" }}>\n          <button\n            className=\"waves-effect waves-light btn-large button\"\n            onClick={handleClickOpen}\n            style={{\n              margin: \"auto\",\n              backgroundColor: colors(),\n              borderRadius: \"3px\",\n            }}\n          >\n            {buttonValue}\n          </button>\n        </div>\n      </div>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Statement of Purpose</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Write a Statement of Purpose for the Job you are applying to\n          </DialogContentText>\n          <TextField\n            className=\"browser-default\"\n            autoFocus\n            margin=\"dense\"\n            id=\"sop\"\n            label=\"Statement of purpose\"\n            type=\"text\"\n            fullWidth\n            multiline\n            value={sop}\n            rows={1}\n            rowsMax={8}\n            onChange={(e) => {\n              setSop(e.target.value);\n            }}\n          />\n          <span className=\"red-text\" style={{ fontSize: \"0.8rem\" }}>\n            {error}\n          </span>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={apply} color=\"primary\" disabled={disabled}>\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Dialog\n        open={open1}\n        onClose={() => setOpen1(false)}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"Error\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            You cannot have more than 10 open applications\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpen1(false)} color=\"primary\" autoFocus>\n            Okay\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Dialog\n        open={open2}\n        onClose={() => setOpen2(false)}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"Error\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            You are already employed, you cannot apply to more jobs\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpen2(false)} color=\"primary\" autoFocus>\n            Okay\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\nconst sty = {\n  padding: \"0.3rem 0\",\n};\nexport default Job;\n","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/components/applicant/Application.js",["165"],"import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport RatingIcon from \"../../utils/rating\";\nimport axios from \"axios\";\n\nexport default function Employee(props) {\n  const application = props.application;\n  const [rating, setRating] = useState(0);\n  const [hoverRating, setHoverRating] = useState(0);\n\n  useEffect(() => {\n    let isMounted = true;\n    if (isMounted) {\n      setRating(props.application.rating);\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  const onMouseEnter = (index) => {\n    if (application.status === \"accepted\") setHoverRating(index);\n  };\n  const onMouseLeave = () => {\n    if (application.status === \"accepted\") setHoverRating(0);\n  };\n  const status = () => {\n    if (application.status === \"applied\") return \"APPLIED\";\n    else if (application.status === \"shortlisted\") return \"SHORTLISTED\";\n    else if (application.status === \"accepted\") return \"ACCEPTED\";\n    else return \"REJECTED\";\n  };\n  const color = () => {\n    if (application.status === \"applied\") return \"#5c74ec\";\n    else if (application.status === \"shortlisted\") return \"#ffe087\";\n    else if (application.status === \"accepted\") return \"#00ab66\";\n    else return \"#cf142b\";\n  };\n  const onSaveRating = (index) => {\n    if (application.status === \"accepted\") {\n      const newRating = {\n        jobId: props.application.id._id,\n        id: props.application.userId,\n        rating: index,\n      };\n      axios\n        .post(\"api/jobs/saveRating\", newRating)\n        .then((res) => {\n          console.log(res.data);\n          setRating(index);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n  return (\n    <div\n      className=\"card\"\n      style={{ minHeight: \"130px\", minWidth: \"15vw\", height: \"100%\" }}\n    >\n      <div className=\"row \" style={{ display: \"flex\" }}>\n        <div className=\"col s12\">\n          <div\n            className=\"card-content black-text\"\n            style={{ paddingRight: \"1rem\", paddingBottom: \"1rem\" }}\n          >\n            <span\n              className=\"card-title left-align\"\n              style={{ fontSize: \"22px\", marginBottom: \"0\" }}\n            >\n              <b>{application.title}</b>\n              <span\n                className=\"white-text\"\n                style={{\n                  fontSize: \"14px\",\n                  marginLeft: \"2rem\",\n                  padding: \"0.3rem 0.3rem\",\n                  borderRadius: \"3px\",\n                  backgroundColor: color(),\n                }}\n              >\n                {status()}\n              </span>\n            </span>\n            <p\n              className=\"left-align\"\n              style={{ padding: \"0.3rem 0\", fontSize: \"14px\" }}\n            >\n              By {application.recruiterName}\n            </p>\n            <p\n              className=\"left-align\"\n              style={{ padding: \"0.3rem 0\", fontSize: \"16px\" }}\n            >\n              Rs {application.salary} /-month\n            </p>\n            {application.dateOfJoining ? (\n              <p className=\"left-align\" style={sty}>\n                <span style={{ fontSize: \"0.85rem\" }}>Joined:</span>&nbsp;\n                {moment(application.dateOfJoining).format(\"LL\")}\n              </p>\n            ) : null}\n            <div className=\"box flex\" style={{ paddingTop: \"0.7rem\" }}>\n              {[1, 2, 3, 4, 5].map((index) => {\n                return (\n                  <RatingIcon\n                    key={index}\n                    index={index}\n                    rating={rating}\n                    hoverRating={hoverRating}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    onSaveRating={onSaveRating}\n                  />\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nconst sty = {\n  padding: \"0.3rem 0\",\n};\n","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/reducers/authReducers.js",["166"],"import { SET_CURRENT_USER } from \"../actions/types\";\nconst isEmpty = require(\"is-empty\");\nconst initialState = {\n  isAuthenticated: false,\n  user: {},\n};\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return {\n        ...state,\n        isAuthenticated: !isEmpty(action.payload.decoded),\n        user: action.payload\n      };\n    default:\n      return state;\n  }\n}","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/reducers/errorReducers.js",["167"],"import { GET_ERRORS } from \"../actions/types\";\nconst initialState = {};\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_ERRORS:\n      return action.payload;\n    default:\n      return state;\n  }\n}","/home/keshav/Documents/Acads/Spring2021/DASS/Assignment_1/2019115010/frontend/src/utils/rating.js",[],{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","severity":1,"message":"173","line":43,"column":6,"nodeType":"174","endLine":43,"endColumn":13,"suggestions":"175"},{"ruleId":"172","severity":1,"message":"176","line":26,"column":6,"nodeType":"174","endLine":26,"endColumn":13,"suggestions":"177"},{"ruleId":"178","severity":1,"message":"179","line":65,"column":31,"nodeType":"180","messageId":"181","endLine":65,"endColumn":33},{"ruleId":"182","severity":1,"message":"183","line":66,"column":23,"nodeType":"184","messageId":"185","endLine":66,"endColumn":25},{"ruleId":"172","severity":1,"message":"176","line":57,"column":6,"nodeType":"174","endLine":57,"endColumn":8,"suggestions":"186"},{"ruleId":"178","severity":1,"message":"179","line":131,"column":39,"nodeType":"180","messageId":"181","endLine":131,"endColumn":41},{"ruleId":"182","severity":1,"message":"183","line":132,"column":21,"nodeType":"184","messageId":"185","endLine":132,"endColumn":23},{"ruleId":"172","severity":1,"message":"187","line":70,"column":6,"nodeType":"174","endLine":70,"endColumn":13,"suggestions":"188"},{"ruleId":"178","severity":1,"message":"179","line":93,"column":39,"nodeType":"180","messageId":"181","endLine":93,"endColumn":41},{"ruleId":"182","severity":1,"message":"183","line":44,"column":44,"nodeType":"184","messageId":"185","endLine":44,"endColumn":46},{"ruleId":"172","severity":1,"message":"189","line":56,"column":6,"nodeType":"174","endLine":56,"endColumn":8,"suggestions":"190"},{"ruleId":"172","severity":1,"message":"191","line":45,"column":6,"nodeType":"174","endLine":45,"endColumn":8,"suggestions":"192"},{"ruleId":"178","severity":1,"message":"179","line":56,"column":56,"nodeType":"180","messageId":"181","endLine":56,"endColumn":58},{"ruleId":"193","severity":1,"message":"194","line":562,"column":19,"nodeType":"195","endLine":562,"endColumn":41},{"ruleId":"196","severity":1,"message":"197","line":1,"column":17,"nodeType":"198","messageId":"199","endLine":1,"endColumn":25},{"ruleId":"172","severity":1,"message":"200","line":42,"column":3,"nodeType":"198","endLine":42,"endColumn":12,"suggestions":"201"},{"ruleId":"172","severity":1,"message":"202","line":19,"column":6,"nodeType":"174","endLine":19,"endColumn":8,"suggestions":"203"},{"ruleId":"204","severity":1,"message":"205","line":7,"column":1,"nodeType":"206","endLine":18,"endColumn":2},{"ruleId":"204","severity":1,"message":"205","line":3,"column":1,"nodeType":"206","endLine":10,"endColumn":2},"no-native-reassign",["207"],"no-negated-in-lhs",["208"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'job'. Either include it or remove the dependency array.","ArrayExpression",["209"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["210"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["211"],"React Hook useEffect has a missing dependency: 'filter'. Either include it or remove the dependency array. You can also do a functional update 'setFilter(f => ...)' if you only need 'filter' in the 'setFilter' call.",["212"],"React Hook useEffect has missing dependencies: 'applicant' and 'props.job._id'. Either include them or remove the dependency array.",["213"],"React Hook useEffect has missing dependencies: 'props.user._id' and 'user'. Either include them or remove the dependency array.",["214"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","React Hook useEffect contains a call to 'setButtonValue'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [job.applicants, job.applications, job.positions, props.user._id] as a second argument to the useEffect Hook.",["215"],"React Hook useEffect has a missing dependency: 'props.application.rating'. Either include it or remove the dependency array. If 'setRating' needs the current value of 'props.application.rating', you can also switch to useReducer instead of useState and read 'props.application.rating' in the reducer.",["216"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},"Update the dependencies array to be: [job, props]",{"range":"233","text":"234"},"Update the dependencies array to be: [props, user]",{"range":"235","text":"236"},"Update the dependencies array to be: [user]",{"range":"237","text":"238"},"Update the dependencies array to be: [filter, props]",{"range":"239","text":"240"},"Update the dependencies array to be: [applicant, props.job._id]",{"range":"241","text":"242"},"Update the dependencies array to be: [props.user._id, user]",{"range":"243","text":"244"},"Add dependencies array: [job.applicants, job.applications, job.positions, props.user._id]",{"range":"245","text":"246"},"Update the dependencies array to be: [props.application.rating]",{"range":"247","text":"248"},[1160,1167],"[job, props]",[576,583],"[props, user]",[1756,1758],"[user]",[1748,1755],"[filter, props]",[1803,1805],"[applicant, props.job._id]",[1487,1489],"[props.user._id, user]",[2144,2144],", [job.applicants, job.applications, job.positions, props.user._id]",[506,508],"[props.application.rating]"]